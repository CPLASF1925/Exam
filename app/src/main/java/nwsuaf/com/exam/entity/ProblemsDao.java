package nwsuaf.com.exam.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROBLEMS".
*/
public class ProblemsDao extends AbstractDao<Problems, Integer> {

    public static final String TABLENAME = "PROBLEMS";

    /**
     * Properties of entity Problems.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Answer = new Property(2, String.class, "answer", false, "ANSWER");
        public final static Property A = new Property(3, String.class, "a", false, "A");
        public final static Property B = new Property(4, String.class, "b", false, "B");
        public final static Property C = new Property(5, String.class, "c", false, "C");
        public final static Property D = new Property(6, String.class, "d", false, "D");
        public final static Property Type = new Property(7, int.class, "type", false, "TYPE");
    }


    public ProblemsDao(DaoConfig config) {
        super(config);
    }
    
    public ProblemsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROBLEMS\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"ANSWER\" TEXT," + // 2: answer
                "\"A\" TEXT," + // 3: a
                "\"B\" TEXT," + // 4: b
                "\"C\" TEXT," + // 5: c
                "\"D\" TEXT," + // 6: d
                "\"TYPE\" INTEGER NOT NULL );"); // 7: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROBLEMS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Problems entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(3, answer);
        }
 
        String a = entity.getA();
        if (a != null) {
            stmt.bindString(4, a);
        }
 
        String b = entity.getB();
        if (b != null) {
            stmt.bindString(5, b);
        }
 
        String c = entity.getC();
        if (c != null) {
            stmt.bindString(6, c);
        }
 
        String d = entity.getD();
        if (d != null) {
            stmt.bindString(7, d);
        }
        stmt.bindLong(8, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Problems entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(3, answer);
        }
 
        String a = entity.getA();
        if (a != null) {
            stmt.bindString(4, a);
        }
 
        String b = entity.getB();
        if (b != null) {
            stmt.bindString(5, b);
        }
 
        String c = entity.getC();
        if (c != null) {
            stmt.bindString(6, c);
        }
 
        String d = entity.getD();
        if (d != null) {
            stmt.bindString(7, d);
        }
        stmt.bindLong(8, entity.getType());
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public Problems readEntity(Cursor cursor, int offset) {
        Problems entity = new Problems( //
            cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // answer
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // a
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // b
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // c
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // d
            cursor.getInt(offset + 7) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Problems entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAnswer(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setA(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setB(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setC(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setD(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(Problems entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(Problems entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Problems entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
