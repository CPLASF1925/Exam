package nwsuaf.com.exam.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LCERROR".
*/
public class lcerrorDao extends AbstractDao<lcerror, Integer> {

    public static final String TABLENAME = "LCERROR";

    /**
     * Properties of entity lcerror.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", true, "ID");
        public final static Property Tid = new Property(1, Long.class, "tid", false, "TID");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
    }


    public lcerrorDao(DaoConfig config) {
        super(config);
    }
    
    public lcerrorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LCERROR\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TID\" INTEGER," + // 1: tid
                "\"DATE\" TEXT);"); // 2: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LCERROR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, lcerror entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long tid = entity.getTid();
        if (tid != null) {
            stmt.bindLong(2, tid);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, lcerror entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long tid = entity.getTid();
        if (tid != null) {
            stmt.bindLong(2, tid);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    @Override
    public lcerror readEntity(Cursor cursor, int offset) {
        lcerror entity = new lcerror( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // tid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, lcerror entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setTid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(lcerror entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(lcerror entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(lcerror entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
