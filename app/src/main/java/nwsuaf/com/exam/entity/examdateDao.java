package nwsuaf.com.exam.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXAMDATE".
*/
public class examdateDao extends AbstractDao<examdate, Integer> {

    public static final String TABLENAME = "EXAMDATE";

    /**
     * Properties of entity examdate.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", true, "ID");
        public final static Property Date = new Property(1, String.class, "date", false, "DATE");
        public final static Property Totalnum = new Property(2, int.class, "totalnum", false, "TOTALNUM");
        public final static Property Right = new Property(3, int.class, "right", false, "RIGHT");
        public final static Property Error = new Property(4, int.class, "error", false, "ERROR");
        public final static Property Time = new Property(5, String.class, "time", false, "TIME");
        public final static Property Ispass = new Property(6, int.class, "ispass", false, "ISPASS");
    }


    public examdateDao(DaoConfig config) {
        super(config);
    }
    
    public examdateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXAMDATE\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DATE\" TEXT," + // 1: date
                "\"TOTALNUM\" INTEGER NOT NULL ," + // 2: totalnum
                "\"RIGHT\" INTEGER NOT NULL ," + // 3: right
                "\"ERROR\" INTEGER NOT NULL ," + // 4: error
                "\"TIME\" TEXT," + // 5: time
                "\"ISPASS\" INTEGER NOT NULL );"); // 6: ispass
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXAMDATE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, examdate entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
        stmt.bindLong(3, entity.getTotalnum());
        stmt.bindLong(4, entity.getRight());
        stmt.bindLong(5, entity.getError());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
        stmt.bindLong(7, entity.getIspass());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, examdate entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
        stmt.bindLong(3, entity.getTotalnum());
        stmt.bindLong(4, entity.getRight());
        stmt.bindLong(5, entity.getError());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
        stmt.bindLong(7, entity.getIspass());
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    @Override
    public examdate readEntity(Cursor cursor, int offset) {
        examdate entity = new examdate( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // date
            cursor.getInt(offset + 2), // totalnum
            cursor.getInt(offset + 3), // right
            cursor.getInt(offset + 4), // error
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // time
            cursor.getInt(offset + 6) // ispass
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, examdate entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTotalnum(cursor.getInt(offset + 2));
        entity.setRight(cursor.getInt(offset + 3));
        entity.setError(cursor.getInt(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIspass(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(examdate entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(examdate entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(examdate entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
