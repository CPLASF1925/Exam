package nwsuaf.com.exam.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ANSWER".
*/
public class answerDao extends AbstractDao<answer, Long> {

    public static final String TABLENAME = "ANSWER";

    /**
     * Properties of entity answer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Num = new Property(0, Long.class, "num", true, "num");
        public final static Property Answer = new Property(1, String.class, "answer", false, "ANSWER");
        public final static Property Isnull = new Property(2, int.class, "isnull", false, "ISNULL");
        public final static Property Istrue = new Property(3, int.class, "istrue", false, "ISTRUE");
    }


    public answerDao(DaoConfig config) {
        super(config);
    }
    
    public answerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ANSWER\" (" + //
                "\"num\" INTEGER PRIMARY KEY ," + // 0: num
                "\"ANSWER\" TEXT," + // 1: answer
                "\"ISNULL\" INTEGER NOT NULL ," + // 2: isnull
                "\"ISTRUE\" INTEGER NOT NULL );"); // 3: istrue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ANSWER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, answer entity) {
        stmt.clearBindings();
 
        Long num = entity.getNum();
        if (num != null) {
            stmt.bindLong(1, num);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(2, answer);
        }
        stmt.bindLong(3, entity.getIsnull());
        stmt.bindLong(4, entity.getIstrue());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, answer entity) {
        stmt.clearBindings();
 
        Long num = entity.getNum();
        if (num != null) {
            stmt.bindLong(1, num);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(2, answer);
        }
        stmt.bindLong(3, entity.getIsnull());
        stmt.bindLong(4, entity.getIstrue());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public answer readEntity(Cursor cursor, int offset) {
        answer entity = new answer( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // num
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // answer
            cursor.getInt(offset + 2), // isnull
            cursor.getInt(offset + 3) // istrue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, answer entity, int offset) {
        entity.setNum(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAnswer(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsnull(cursor.getInt(offset + 2));
        entity.setIstrue(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(answer entity, long rowId) {
        entity.setNum(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(answer entity) {
        if(entity != null) {
            return entity.getNum();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(answer entity) {
        return entity.getNum() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
